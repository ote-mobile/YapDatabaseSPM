// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target armv7-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YapDatabaseSPM
import Foundation
import Swift
@_exported import YapDatabaseSPM
import _Concurrency
extension YapDatabaseSPM.YapDatabase {
  public class func codableSerializer<T>(_ type: T.Type) -> (Swift.String, Swift.String, Any) -> Foundation.Data where T : Swift.Decodable, T : Swift.Encodable
  public class func codableDeserializer<T>(_ type: T.Type) -> (Swift.String, Swift.String, Foundation.Data) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func registerCodableSerialization<T>(_ type: T.Type, forCollection collection: Swift.String?) where T : Swift.Decodable, T : Swift.Encodable
  public func registerCodableSerialization<O, M>(_ objectType: O.Type, metadata metadataType: M.Type, forCollection collection: Swift.String?) where O : Swift.Decodable, O : Swift.Encodable, M : Swift.Decodable, M : Swift.Encodable
}
extension YapDatabaseSPM.YapDatabaseReadTransaction {
  public func row<O, M>(forKey key: Swift.String, inCollection collection: Swift.String?) -> (object: O, metadata: M?)?
  public func iterateCollections(_ block: (Swift.String, inout Swift.Bool) -> Swift.Void)
  public func iterateKeys(inCollection collection: Swift.String?, using block: (Swift.String, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjects<T>(inCollection collection: Swift.String?, using block: (Swift.String, T, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjects<T>(inCollection collection: Swift.String?, using block: (Swift.String, T, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String) -> Swift.Bool)?)
  public func iterateKeysAndObjectsInAllCollections(_ block: (Swift.String, Swift.String, Any, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjectsInAllCollections(_ block: (Swift.String, Swift.String, Any, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String, Swift.String) -> Swift.Bool)?)
  public func iterateKeysAndMetadata<T>(inCollection collection: Swift.String?, using block: (Swift.String, T?, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndMetadata<T>(inCollection collection: Swift.String?, using block: (Swift.String, T?, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String) -> Swift.Bool)?)
  public func iterateKeysAndMetadataInAllCollections(_ block: (Swift.String, Swift.String, Any?, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndMetadataInAllCollections(_ block: (Swift.String, Swift.String, Any?, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String, Swift.String) -> Swift.Bool)?)
  public func iterateRows<O, M>(inCollection collection: Swift.String?, using block: (Swift.String, O, M?, inout Swift.Bool) -> Swift.Void)
  public func iterateRows<O, M>(inCollection collection: Swift.String?, using block: (Swift.String, O, M?, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String) -> Swift.Bool)?)
  public func iterateRowsInAllCollections(_ block: (Swift.String, Swift.String, Any, Any?, inout Swift.Bool) -> Swift.Void)
  public func iterateRowsInAllCollections(_ block: (Swift.String, Swift.String, Any, Any?, inout Swift.Bool) -> Swift.Void, filter: ((Swift.String, Swift.String) -> Swift.Bool)?)
}
extension YapDatabaseSPM.YapDatabaseSecondaryIndexTransaction {
  public func iterateKeys(matching query: YapDatabaseSPM.YapDatabaseQuery, using block: (Swift.String, Swift.String, inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  public func iterateKeysAndMetadata(matching query: YapDatabaseSPM.YapDatabaseQuery, using block: (Swift.String, Swift.String, Any?, inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  public func iterateKeysAndObjects(matching query: YapDatabaseSPM.YapDatabaseQuery, using block: (Swift.String, Swift.String, Any?, inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  public func iterateRows(matching query: YapDatabaseSPM.YapDatabaseQuery, using block: (Swift.String, Swift.String, Any, Any?, inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  public func iterateIndexedValues(inColumn column: Swift.String, matching query: YapDatabaseSPM.YapDatabaseQuery, using block: (Any, inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  public func numberOfRows(matching query: YapDatabaseSPM.YapDatabaseQuery) -> Swift.UInt?
}
public protocol YapDatabaseRelationshipNode {
  func yapDatabaseRelationshipEdges() -> [YapDatabaseSPM.YapDatabaseRelationshipEdge]?
  func yapDatabaseRelationshipEdgeDeleted(_ edge: YapDatabaseSPM.YapDatabaseRelationshipEdge, with reason: YapDatabaseSPM.YDB_NotifyReason) -> Any?
}
extension YapDatabaseSPM.YapDatabaseRelationshipNode {
  public func yapDatabaseRelationshipEdgeDeleted(_ edge: YapDatabaseSPM.YapDatabaseRelationshipEdge, with reason: YapDatabaseSPM.YDB_NotifyReason) -> Any?
}
extension YapDatabaseSPM.YapDatabaseViewConnection {
  public func getChanges(forNotifications notifications: [Foundation.Notification], withMappings mappings: YapDatabaseSPM.YapDatabaseViewMappings) -> (sectionChanges: [YapDatabaseSPM.YapDatabaseViewSectionChange], rowChanges: [YapDatabaseSPM.YapDatabaseViewRowChange])
}
extension YapDatabaseSPM.YapDatabaseViewTransaction {
  public func getCollectionKey(atIndex index: Swift.Int, inGroup group: Swift.String) -> (Swift.String, Swift.String)?
  public func getGroupIndex(forKey key: Swift.String, inCollection collection: Swift.String?) -> (Swift.String, Swift.Int)?
  public func iterateKeys(inGroup group: Swift.String, using block: (Swift.String, Swift.String, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeys(inGroup group: Swift.String, reversed: Swift.Bool, using block: (Swift.String, Swift.String, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeys(inGroup group: Swift.String, reversed: Swift.Bool, range: Foundation.NSRange, using block: (Swift.String, Swift.String, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndMetadata(inGroup group: Swift.String, using block: (Swift.String, Swift.String, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndMetadata(inGroup group: Swift.String, reversed: Swift.Bool, using block: (Swift.String, Swift.String, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndMetadata(inGroup group: Swift.String, reversed: Swift.Bool, range: Foundation.NSRange, using block: (Swift.String, Swift.String, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjects(inGroup group: Swift.String, using block: (Swift.String, Swift.String, Any, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjects(inGroup group: Swift.String, reversed: Swift.Bool, using block: (Swift.String, Swift.String, Any, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateKeysAndObjects(inGroup group: Swift.String, reversed: Swift.Bool, range: Foundation.NSRange, using block: (Swift.String, Swift.String, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateRows(inGroup group: Swift.String, using block: (Swift.String, Swift.String, Any, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateRows(inGroup group: Swift.String, reversed: Swift.Bool, using block: (Swift.String, Swift.String, Any, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func iterateRows(inGroup group: Swift.String, reversed: Swift.Bool, range: Foundation.NSRange, using block: (Swift.String, Swift.String, Any, Any?, Swift.Int, inout Swift.Bool) -> Swift.Void)
  public func getCollectionKey(atIndexPath indexPath: Foundation.IndexPath, withMappings mappings: YapDatabaseSPM.YapDatabaseViewMappings) -> (Swift.String, Swift.String)?
  public func getCollectionKey(forRow row: Swift.Int, section: Swift.Int, withMappings mappings: YapDatabaseSPM.YapDatabaseViewMappings) -> (Swift.String, Swift.String)?
}
